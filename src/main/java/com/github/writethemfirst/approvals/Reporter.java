package com.github.writethemfirst.approvals;

import java.nio.file.Path;

/**
 * # Reporter
 *
 * *Approvals-Java*, as many other *Approval Testing* frameworks, relies on comparisons between data which has been
 * approved by the developer, and data which is computed from the *Program Under Tests*.
 *
 * In case there's any difference found during the comparison, the framework needs to be able to report those
 * differences to the developer. There are plenty of ways to report those differences, like generating assertions
 * errors, logging the differences in a file, or whatever you can imagine.
 *
 * The `Reporter` interface is the contract to implement for instanciating reporters to be called by the framework to
 * report the differences found during computing the comparisons.
 *
 * There will be a set of reporters already implemented and provided by the framework, but people can then choose to
 * implement their owns, and to use them while computing the approvals.
 */
public interface Reporter {

    /**
     * A `Reporter` is called whenever a difference is found while comparing the output of a *Program Under Tests* and
     * the existing *approved* files linked to the tests. That method is the one which will be called by the framework,
     * specifying the *approved* and *received* files which present differences.
     *
     * It is then used to implement the behavior to execute for dealing with that mismatch between both files.
     *
     * @param approved The Path to the already *approved* file (which is supposed to contain the data reviewed by the
     *                 developer)
     * @param received The Path to the temporary *received* file (which contains the data generated by the *Program
     *                 Under Tests*)
     * @throws Throwable Exceptions can be thrown by the implemented reporters depending on the situation they're
     *                   executed in. One of the main reason an Exception could be thrown is if the reporter is supposed
     *                   to execute some work it actually cannot do in the current situation (for example: displaying a
     *                   GUI in a headless context).
     */
    void mismatch(Path approved, Path received) throws Throwable;

    /**
     * A `Reporter` may not be relevant in all contexts, and they should provide some automated checks validating that
     * they're actually able to perform what they're supposed to do in the current execution context.
     *
     * This method allows to state if a `Reporter` should be executed in case any differences are found during the
     * comparison of *approved* and *received* files. If it returns false, the `Reporter` won't be triggered.
     *
     * @return true if the `Reporter` should be triggered in the current execution context.
     */
    boolean isAvailable();
}
